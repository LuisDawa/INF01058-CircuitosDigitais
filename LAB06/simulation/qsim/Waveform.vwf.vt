// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/04/2025 16:51:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    LAB06
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LAB06_vlg_sample_tst(
	A,
	B,
	SEL,
	sampler_tx
);
input [3:0] A;
input [3:0] B;
input [1:0] SEL;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or SEL)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module LAB06_vlg_check_tst (
	A_D,
	B_D,
	C_D,
	D_D,
	E_D,
	F_D,
	G_D,
	sampler_rx
);
input  A_D;
input  B_D;
input  C_D;
input  D_D;
input  E_D;
input  F_D;
input  G_D;
input sampler_rx;

reg  A_D_expected;
reg  B_D_expected;
reg  C_D_expected;
reg  D_D_expected;
reg  E_D_expected;
reg  F_D_expected;
reg  G_D_expected;

reg  A_D_prev;
reg  B_D_prev;
reg  C_D_prev;
reg  D_D_prev;
reg  E_D_prev;
reg  F_D_prev;
reg  G_D_prev;

reg  A_D_expected_prev;
reg  B_D_expected_prev;
reg  C_D_expected_prev;
reg  D_D_expected_prev;
reg  E_D_expected_prev;
reg  F_D_expected_prev;
reg  G_D_expected_prev;

reg  last_A_D_exp;
reg  last_B_D_exp;
reg  last_C_D_exp;
reg  last_D_D_exp;
reg  last_E_D_exp;
reg  last_F_D_exp;
reg  last_G_D_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_D_prev = A_D;
	B_D_prev = B_D;
	C_D_prev = C_D;
	D_D_prev = D_D;
	E_D_prev = E_D;
	F_D_prev = F_D;
	G_D_prev = G_D;
end

// update expected /o prevs

always @(trigger)
begin
	A_D_expected_prev = A_D_expected;
	B_D_expected_prev = B_D_expected;
	C_D_expected_prev = C_D_expected;
	D_D_expected_prev = D_D_expected;
	E_D_expected_prev = E_D_expected;
	F_D_expected_prev = F_D_expected;
	G_D_expected_prev = G_D_expected;
end



// expected A_D
initial
begin
	A_D_expected = 1'bX;
end 

// expected B_D
initial
begin
	B_D_expected = 1'bX;
end 

// expected C_D
initial
begin
	C_D_expected = 1'bX;
end 

// expected D_D
initial
begin
	D_D_expected = 1'bX;
end 

// expected E_D
initial
begin
	E_D_expected = 1'bX;
end 

// expected F_D
initial
begin
	F_D_expected = 1'bX;
end 

// expected G_D
initial
begin
	G_D_expected = 1'bX;
end 
// generate trigger
always @(A_D_expected or A_D or B_D_expected or B_D or C_D_expected or C_D or D_D_expected or D_D or E_D_expected or E_D or F_D_expected or F_D or G_D_expected or G_D)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A_D = %b | expected B_D = %b | expected C_D = %b | expected D_D = %b | expected E_D = %b | expected F_D = %b | expected G_D = %b | ",A_D_expected_prev,B_D_expected_prev,C_D_expected_prev,D_D_expected_prev,E_D_expected_prev,F_D_expected_prev,G_D_expected_prev);
	$display("| real A_D = %b | real B_D = %b | real C_D = %b | real D_D = %b | real E_D = %b | real F_D = %b | real G_D = %b | ",A_D_prev,B_D_prev,C_D_prev,D_D_prev,E_D_prev,F_D_prev,G_D_prev);
`endif
	if (
		( A_D_expected_prev !== 1'bx ) && ( A_D_prev !== A_D_expected_prev )
		&& ((A_D_expected_prev !== last_A_D_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_D_expected_prev);
		$display ("     Real value = %b", A_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_D_exp = A_D_expected_prev;
	end
	if (
		( B_D_expected_prev !== 1'bx ) && ( B_D_prev !== B_D_expected_prev )
		&& ((B_D_expected_prev !== last_B_D_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port B_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", B_D_expected_prev);
		$display ("     Real value = %b", B_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_B_D_exp = B_D_expected_prev;
	end
	if (
		( C_D_expected_prev !== 1'bx ) && ( C_D_prev !== C_D_expected_prev )
		&& ((C_D_expected_prev !== last_C_D_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C_D_expected_prev);
		$display ("     Real value = %b", C_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_C_D_exp = C_D_expected_prev;
	end
	if (
		( D_D_expected_prev !== 1'bx ) && ( D_D_prev !== D_D_expected_prev )
		&& ((D_D_expected_prev !== last_D_D_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D_D_expected_prev);
		$display ("     Real value = %b", D_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D_D_exp = D_D_expected_prev;
	end
	if (
		( E_D_expected_prev !== 1'bx ) && ( E_D_prev !== E_D_expected_prev )
		&& ((E_D_expected_prev !== last_E_D_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port E_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", E_D_expected_prev);
		$display ("     Real value = %b", E_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_E_D_exp = E_D_expected_prev;
	end
	if (
		( F_D_expected_prev !== 1'bx ) && ( F_D_prev !== F_D_expected_prev )
		&& ((F_D_expected_prev !== last_F_D_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F_D_expected_prev);
		$display ("     Real value = %b", F_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_F_D_exp = F_D_expected_prev;
	end
	if (
		( G_D_expected_prev !== 1'bx ) && ( G_D_prev !== G_D_expected_prev )
		&& ((G_D_expected_prev !== last_G_D_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port G_D :: @time = %t",  $realtime);
		$display ("     Expected value = %b", G_D_expected_prev);
		$display ("     Real value = %b", G_D_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_G_D_exp = G_D_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module LAB06_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] A;
reg [3:0] B;
reg [1:0] SEL;
// wires                                               
wire A_D;
wire B_D;
wire C_D;
wire D_D;
wire E_D;
wire F_D;
wire G_D;

wire sampler;                             

// assign statements (if any)                          
LAB06 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.A_D(A_D),
	.B(B),
	.B_D(B_D),
	.C_D(C_D),
	.D_D(D_D),
	.E_D(E_D),
	.F_D(F_D),
	.G_D(G_D),
	.SEL(SEL)
);
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
	A[3] = #80000 1'b1;
	A[3] = #160000 1'b0;
	A[3] = #160000 1'b1;
	A[3] = #160000 1'b0;
	A[3] = #160000 1'b1;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b0;
	A[2] = #160000 1'b1;
	A[2] = #160000 1'b0;
	A[2] = #80000 1'b1;
	A[2] = #80000 1'b0;
	A[2] = #80000 1'b1;
	A[2] = #160000 1'b0;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
	A[1] = #80000 1'b1;
	A[1] = #160000 1'b0;
	A[1] = #160000 1'b1;
	A[1] = #80000 1'b0;
	A[1] = #80000 1'b1;
	A[1] = #80000 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b0;
	A[0] = #160000 1'b1;
	A[0] = #80000 1'b0;
	A[0] = #160000 1'b1;
	A[0] = #80000 1'b0;
	A[0] = #240000 1'b1;
	A[0] = #160000 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
	B[3] = #80000 1'b1;
	B[3] = #160000 1'b0;
	B[3] = #640000 1'b1;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b1;
	B[2] = #160000 1'b0;
	B[2] = #160000 1'b1;
	B[2] = #80000 1'b0;
	B[2] = #80000 1'b1;
	B[2] = #240000 1'b0;
	B[2] = #80000 1'b1;
	B[2] = #160000 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
	B[1] = #80000 1'b0;
	B[1] = #160000 1'b1;
	B[1] = #80000 1'b0;
	B[1] = #80000 1'b1;
	B[1] = #80000 1'b0;
	B[1] = #80000 1'b1;
	B[1] = #80000 1'b0;
	B[1] = #160000 1'b1;
	B[1] = #80000 1'b0;
	B[1] = #80000 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
	B[0] = #80000 1'b0;
	B[0] = #640000 1'b1;
	B[0] = #160000 1'b0;
	B[0] = #80000 1'b1;
end 
// SEL[ 1 ]
initial
begin
	SEL[1] = 1'b0;
end 
// SEL[ 0 ]
initial
begin
	SEL[0] = 1'b0;
end 

LAB06_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.SEL(SEL),
	.sampler_tx(sampler)
);

LAB06_vlg_check_tst tb_out(
	.A_D(A_D),
	.B_D(B_D),
	.C_D(C_D),
	.D_D(D_D),
	.E_D(E_D),
	.F_D(F_D),
	.G_D(G_D),
	.sampler_rx(sampler)
);
endmodule

